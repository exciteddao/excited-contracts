{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "contracts/insured-vesting-v1/InsuredVestingV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19; // TODO(audit) decide on version as in VestingV1\n\nimport {Ownable as OwnerRole} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ProjectRole} from \"../roles/ProjectRole.sol\";\nimport {Address, IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n// This contract distributes a project's tokens to users, proportionally over a specified period of time, such that tokens are vested\n// based on the amount of funding token (e.g. USDC) sent by the user, and the exchange rate as specified by PROJECT_TOKEN_TO_FUNDING_TOKEN_RATE.\n// Funding tokens are fully insured, such that at any point in time, a user can set their decision to be refunded with any (unclaimed) funding tokens.\n\n// Roles:\n// - Owner: Can accelerate (emergency release) vesting in case of a critical bug;\n//          can help the project recover tokens (including overfunded project or funding tokens) and ether sent to the contract by mistake.\n//          This role is revocable.\n// - Project: Can set the allocation of funding token that users can send to the contract; can activate (initiate vesting);\n//            can claim on behalf of users (users still get their tokens in this case).\n// - User: Can fund the contract according to their allocation;\n//         can claim their tokens once the vesting period has started; can set their decision to be refunded with funding tokens instead of project tokens.\n\n// When project calls activate(), the contract will:\n// - Transfer the necessary amount of tokens required to cover all funded tokens.\n// - Set the vesting clock to start at the specified time (no more than 90 days in the future).\n// - Lock allocations (project cannot add or update allocations anymore).\n// - Lock funding (users cannot send more funding tokens to the contract).\ncontract InsuredVestingV1 is OwnerRole, ProjectRole {\n    using SafeERC20 for IERC20;\n\n    // Prevent project from locking up tokens for a long time in the future, mostly in case of human error.\n    uint256 public constant MAX_START_TIME_FROM_NOW = 3 * 30 days;\n\n    uint256 public constant MAX_VESTING_DURATION_SECONDS = 10 * 365 days;\n\n    // Set in constructor\n    IERC20 public immutable FUNDING_TOKEN;\n    IERC20 public immutable PROJECT_TOKEN;\n    uint256 public immutable FUNDING_TOKEN_AMOUNT_IN;\n    uint256 public immutable PROJECT_TOKEN_AMOUNT_OUT;\n    uint256 public immutable VESTING_DURATION_SECONDS;\n\n    // When the contract is emergency released, users can claim all their unclaimed FUNDING_TOKEN immediately (get a refund),\n    // (the project can also claim on behalf of users. Users still get their tokens in this case).\n    // This ignores the user decision and treats all users as if they had decided to be refunded (cancels the rest of the deal).\n    bool public isEmergencyReleased = false;\n\n    uint256 public vestingStartTime;\n    uint256 public fundingTokenTotalAmount; // total amount of funding tokens funded by users\n    uint256 public fundingTokenTotalClaimed;\n\n    // All variables are based on FUNDING_TOKEN\n    // PROJECT_TOKEN calculations are done by converting from FUNDING_TOKEN, using PROJECT_TOKEN_AMOUNT_OUT/FUNDING_TOKEN_AMOUNT_IN\n    struct UserVesting {\n        // Upper bound of FUNDING_TOKEN that user is allowed to send to the contract (set by project)\n        uint256 fundingTokenAllocation;\n        // total FUNDING_TOKEN amount transferred to contract by user\n        uint256 fundingTokenAmount;\n        // Amount of FUNDING_TOKEN claimed by user\n        uint256 fundingTokenClaimed;\n        // true - upon claiming, user will get FUNDING_TOKEN back, false - user will get PROJECT_TOKEN\n        bool shouldRefund;\n    }\n\n    mapping(address => UserVesting) public userVestings;\n\n    // --- Events ---\n    event AllocationSet(address indexed user, uint256 fundingTokenNewAmount, uint256 fundingTokenOldAmount, uint256 fundingTokenRefundedAmount);\n    event FundsAdded(address indexed user, uint256 fundingTokenAmount);\n    event Activated();\n\n    event TokensClaimed(address indexed user, uint256 fundingTokenAmount, uint256 projectTokenAmount, bool indexed isInitiatedByProject);\n    event RefundClaimed(address indexed user, uint256 fundingTokenAmount, uint256 projectTokenAmount, bool indexed isInitiatedByProject);\n\n    event DecisionSet(address indexed user, bool indexed shouldRefund);\n    event EmergencyReleased();\n    event EmergencyRefunded(address indexed user, bool indexed isInitiatedByProject, uint256 fundingTokenAmount);\n    event TokenRecovered(address indexed token, uint256 amount);\n    event EtherRecovered(uint256 amount);\n\n    // --- Errors ---\n    error VestingDurationTooLong(uint256 vestingPeriodSeconds);\n    error StartTimeTooDistant(uint256 vestingStartTime, uint256 maxStartTime);\n    error StartTimeInPast(uint256 vestingStartTime);\n    error OnlyProjectOrSender();\n    error AllocationExceeded(uint256 fundingTokenRemainingAllocation);\n    error NoFundsAdded();\n    error VestingNotStarted();\n    error AlreadyActivated();\n    error NothingToClaim();\n    error EmergencyReleaseActive();\n    error NotEmergencyReleased();\n\n    // --- Modifiers ---\n    modifier onlyBeforeActivation() {\n        if (isActivated()) revert AlreadyActivated();\n        _;\n    }\n\n    modifier onlyProjectOrSender(address user) {\n        if (!(msg.sender == projectWallet || msg.sender == user)) revert OnlyProjectOrSender();\n        _;\n    }\n\n    modifier onlyIfNotEmergencyReleased() {\n        if (isEmergencyReleased) revert EmergencyReleaseActive();\n        _;\n    }\n\n    constructor(\n        address _fundingToken,\n        address _projectToken,\n        uint256 _vestingDurationSeconds,\n        uint256 _fundingTokenAmountIn,\n        uint256 _projectTokenAmountOut,\n        address _projectWallet\n    ) ProjectRole(_projectWallet) {\n        if (_vestingDurationSeconds > MAX_VESTING_DURATION_SECONDS) revert VestingDurationTooLong(_vestingDurationSeconds);\n\n        FUNDING_TOKEN = IERC20(_fundingToken);\n        PROJECT_TOKEN = IERC20(_projectToken);\n        FUNDING_TOKEN_AMOUNT_IN = _fundingTokenAmountIn;\n        PROJECT_TOKEN_AMOUNT_OUT = _projectTokenAmountOut;\n        VESTING_DURATION_SECONDS = _vestingDurationSeconds;\n    }\n\n    // --- User only functions ---\n    function addFunds(uint256 amount) external onlyBeforeActivation onlyIfNotEmergencyReleased {\n        UserVesting storage userVesting = userVestings[msg.sender];\n        uint256 remainingAllocation = userVesting.fundingTokenAllocation - userVesting.fundingTokenAmount;\n        if (amount > remainingAllocation) revert AllocationExceeded(remainingAllocation);\n\n        userVesting.fundingTokenAmount += amount;\n        fundingTokenTotalAmount += amount;\n        FUNDING_TOKEN.safeTransferFrom(msg.sender, address(this), amount);\n\n        emit FundsAdded(msg.sender, amount);\n    }\n\n    // Disabled if emergency released, as it may contradict the global refund decision that's been taken by emergency release\n    function claim(address user) external onlyProjectOrSender(user) onlyIfNotEmergencyReleased {\n        if (!isVestingStarted()) revert VestingNotStarted();\n\n        UserVesting storage userVesting = userVestings[user];\n        if (userVesting.fundingTokenAmount == 0) revert NoFundsAdded();\n\n        uint256 fundingTokenClaimable = fundingTokenClaimableFor(user);\n        if (fundingTokenClaimable == 0) revert NothingToClaim();\n\n        userVesting.fundingTokenClaimed += fundingTokenClaimable;\n        fundingTokenTotalClaimed += fundingTokenClaimable;\n\n        uint256 projectTokenClaimable = fundingTokenToProjectToken(fundingTokenClaimable);\n\n        if (!userVesting.shouldRefund) {\n            PROJECT_TOKEN.safeTransfer(user, projectTokenClaimable);\n            FUNDING_TOKEN.safeTransfer(projectWallet, fundingTokenClaimable);\n\n            emit TokensClaimed(user, fundingTokenClaimable, projectTokenClaimable, msg.sender == projectWallet);\n        } else {\n            PROJECT_TOKEN.safeTransfer(projectWallet, projectTokenClaimable);\n            FUNDING_TOKEN.safeTransfer(user, fundingTokenClaimable);\n\n            emit RefundClaimed(user, fundingTokenClaimable, projectTokenClaimable, msg.sender == projectWallet);\n        }\n    }\n\n    function setDecision(bool _shouldRefund) external onlyIfNotEmergencyReleased {\n        UserVesting storage userVesting = userVestings[msg.sender];\n        if (userVesting.fundingTokenAmount == 0) revert NoFundsAdded();\n        if (userVesting.shouldRefund == _shouldRefund) return;\n        userVesting.shouldRefund = _shouldRefund;\n\n        emit DecisionSet(msg.sender, _shouldRefund);\n    }\n\n    // --- Project only functions ---\n    function setFundingTokenAllocation(address user, uint256 newAllocation) external onlyProject onlyBeforeActivation onlyIfNotEmergencyReleased {\n        UserVesting storage userVesting = userVestings[user];\n        uint256 oldAllocation = userVesting.fundingTokenAllocation;\n        userVesting.fundingTokenAllocation = newAllocation;\n\n        uint256 amountToRefund = 0;\n\n        // Refund user if they have funded more than the new allocation\n        if (userVesting.fundingTokenAmount > newAllocation) {\n            // Note: it is required that userVesting.fundingTokenClaimed is 0.\n            // This is guaranteed by requiring both onlyBeforeActivation && onlyIfNotEmergencyReleased\n            amountToRefund = userVesting.fundingTokenAmount - newAllocation;\n            userVesting.fundingTokenAmount -= amountToRefund;\n            fundingTokenTotalAmount -= amountToRefund;\n            FUNDING_TOKEN.safeTransfer(user, amountToRefund);\n        }\n\n        emit AllocationSet(user, newAllocation, oldAllocation, amountToRefund);\n    }\n\n    function activate(uint256 _vestingStartTime) external onlyProject onlyBeforeActivation onlyIfNotEmergencyReleased {\n        if (_vestingStartTime > (block.timestamp + MAX_START_TIME_FROM_NOW))\n            revert StartTimeTooDistant(_vestingStartTime, block.timestamp + MAX_START_TIME_FROM_NOW);\n\n        if (_vestingStartTime < block.timestamp) revert StartTimeInPast(_vestingStartTime);\n\n        if (fundingTokenTotalAmount == 0) revert NoFundsAdded();\n\n        vestingStartTime = _vestingStartTime;\n\n        PROJECT_TOKEN.safeTransferFrom(projectWallet, address(this), fundingTokenToProjectToken(fundingTokenTotalAmount));\n\n        emit Activated();\n    }\n\n    // --- Emergency functions ---\n    // It is possible to emergency release prior to activation, because users\n    // may have already funded the contract\n    function emergencyRelease() external onlyOwner onlyIfNotEmergencyReleased {\n        isEmergencyReleased = true;\n        emit EmergencyReleased();\n    }\n\n    function emergencyRefund(address user) external onlyProjectOrSender(user) {\n        if (!isEmergencyReleased) revert NotEmergencyReleased();\n\n        UserVesting storage userVesting = userVestings[user];\n        if (userVesting.fundingTokenAmount == 0) revert NoFundsAdded();\n\n        uint256 claimable = userVesting.fundingTokenAmount - userVesting.fundingTokenClaimed;\n\n        if (claimable == 0) revert NothingToClaim();\n\n        userVesting.fundingTokenClaimed += claimable;\n        fundingTokenTotalClaimed += claimable;\n        FUNDING_TOKEN.safeTransfer(user, claimable);\n\n        // PROJECT_TOKEN is not refunded to the project here, to reduce revert risk surface\n        // The project can recover the tokens by calling recoverToken(), which takes\n        // being emergency released into account.\n\n        emit EmergencyRefunded(user, msg.sender == projectWallet, claimable);\n    }\n\n    function recoverToken(address tokenAddress) external onlyOwner {\n        uint256 tokenBalanceToRecover = IERC20(tokenAddress).balanceOf(address(this));\n\n        // in case of PROJECT_TOKEN, we also need to retain the total locked amount in the contract\n        if (tokenAddress == address(PROJECT_TOKEN) && !isEmergencyReleased) {\n            uint256 totalOwed = fundingTokenToProjectToken(fundingTokenTotalAmount - fundingTokenTotalClaimed);\n            if (totalOwed >= tokenBalanceToRecover) revert NothingToClaim();\n            tokenBalanceToRecover -= totalOwed;\n        }\n\n        if (tokenAddress == address(FUNDING_TOKEN)) {\n            uint256 totalOwed = fundingTokenTotalAmount - fundingTokenTotalClaimed;\n            if (totalOwed >= tokenBalanceToRecover) revert NothingToClaim();\n            tokenBalanceToRecover -= totalOwed;\n        }\n\n        IERC20(tokenAddress).safeTransfer(projectWallet, tokenBalanceToRecover);\n\n        emit TokenRecovered(tokenAddress, tokenBalanceToRecover);\n    }\n\n    // Recovers the native token of the chain\n    function recoverEther() external onlyOwner {\n        uint256 etherToRecover = address(this).balance;\n        Address.sendValue(payable(projectWallet), etherToRecover);\n\n        emit EtherRecovered(etherToRecover);\n    }\n\n    // --- View functions ---\n    function isActivated() public view returns (bool) {\n        return vestingStartTime != 0;\n    }\n\n    function isVestingStarted() public view returns (bool) {\n        return isActivated() && vestingStartTime <= block.timestamp;\n    }\n\n    // FUNDING_TOKEN_AMOUNT_IN and PROJECT_TOKEN_AMOUNT_OUT are to resemble DEX-style exchange rates and can hold any arbitrary amount\n    // Meaning that for the given FUNDING_TOKEN_AMOUNT_IN, you would get PROJECT_TOKEN_AMOUNT_OUT\n    // e.g. FUNDING_TOKEN_AMOUNT_IN (6 decimals) = 0.2*1e6 = 200_000\n    //      PROJECT_TOKEN_AMOUNT_OUT (18 decimals) = 1e18\n    //      which means, for every 0.2 of funding token, you get 1 of project token\n    function fundingTokenToProjectToken(uint256 fundingTokenAmount) public view returns (uint256) {\n        return (fundingTokenAmount * PROJECT_TOKEN_AMOUNT_OUT) / FUNDING_TOKEN_AMOUNT_IN;\n    }\n\n    function fundingTokenVestedFor(address user) public view returns (uint256) {\n        if (!isVestingStarted()) return 0;\n        UserVesting memory userVesting = userVestings[user];\n        return Math.min(((block.timestamp - vestingStartTime) * userVesting.fundingTokenAmount) / VESTING_DURATION_SECONDS, userVesting.fundingTokenAmount);\n    }\n\n    function fundingTokenClaimableFor(address user) public view returns (uint256) {\n        return fundingTokenVestedFor(user) - userVestings[user].fundingTokenClaimed;\n    }\n\n    function projectTokenVestedFor(address user) external view returns (uint256) {\n        return fundingTokenToProjectToken(fundingTokenVestedFor(user));\n    }\n\n    function projectTokenClaimableFor(address user) external view returns (uint256) {\n        return fundingTokenToProjectToken(fundingTokenClaimableFor(user));\n    }\n}\n"
    },
    "contracts/roles/ProjectRole.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Taken from OpenZeppelin Contracts (access/Ownable.sol).\n * Represents the project owner entity of a given project.\n * The `renounce` functionality has been removed to prevent accidental revoking.\n */\nabstract contract ProjectRole is Context {\n    address public projectWallet;\n\n    event ProjectRoleTransferred(address indexed previousProjectWallet, address indexed newProjectWallet);\n\n    constructor(address newProjectWallet) {\n        _transferProjectRole(newProjectWallet);\n    }\n\n    modifier onlyProject() {\n        // solhint-disable-next-line reason-string, custom-errors\n        require(projectWallet == _msgSender(), \"ProjectRole: caller is not the project wallet\");\n        _;\n    }\n\n    function transferProjectRole(address newProjectWallet) public onlyProject {\n        _transferProjectRole(newProjectWallet);\n    }\n\n    // TODO(audit) switch internal to private\n    function _transferProjectRole(address newProjectWallet) internal {\n        // solhint-disable-next-line reason-string, custom-errors\n        require(newProjectWallet != address(0), \"ProjectRole: new project wallet is the zero address\");\n        address oldProjectWallet = projectWallet;\n        projectWallet = newProjectWallet;\n        emit ProjectRoleTransferred(oldProjectWallet, newProjectWallet);\n    }\n}\n"
    },
    "contracts/test/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20 {\n    constructor(uint256 amount, string memory symbol) ERC20(symbol, symbol) {\n        _mint(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/test/MockUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockUSDC is ERC20 {\n    constructor() ERC20(\"MOCKUSDC\", \"MOCKUSDC\") {\n        _mint(msg.sender, 1e6 * 1e9);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n}\n"
    },
    "contracts/test/MockXCTD.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockXCXC is ERC20 {\n    constructor() ERC20(\"MOCKXCXC\", \"MOCKXCXC\") {\n        _mint(msg.sender, 1e6 * 1e18);\n    }\n}\n"
    },
    "contracts/vesting-v1/VestingV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19; // TODO(audit) choose the \"correct\" (i.e. stable/secure) version.\n\nimport {Ownable as OwnerRole} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ProjectRole} from \"../roles/ProjectRole.sol\";\nimport {Address, IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n// This contract distributes a project's tokens to users proportionally over a specified period of time, such that tokens are vested.\n\n// Roles:\n// - Owner: Can accelerate (emergency release) vesting in case of a critical bug;\n//          can help the project recover tokens (including overfunded project tokens) and ether sent to the contract by mistake.\n//          This role is revocable.\n// - Project: Can set the amount of tokens to be distributed to each user;\n//            can activate (initiate vesting); can claim on behalf of users (users still get their tokens in this case).\n// - User: can claim their vested tokens, once the vesting period has started.\n\n// When project calls activate(), the contract will:\n// - Transfer the necessary amount of project tokens required to cover user vestings, to fund itself.\n// - Set the vesting clock to start at the specified time (but no more than 90 days in the future).\n// - Lock amounts (project cannot add or update token vesting amounts for users anymore).\ncontract VestingV1 is OwnerRole, ProjectRole {\n    using SafeERC20 for IERC20;\n\n    // Prevent project from locking up tokens for a long time in the future, mostly in case of human error\n    uint256 public constant MAX_START_TIME_FROM_NOW = 3 * 30 days;\n\n    uint256 public constant MAX_VESTING_DURATION_SECONDS = 10 * 365 days;\n\n    // Set in constructor\n    IERC20 public immutable PROJECT_TOKEN;\n    uint256 public immutable VESTING_DURATION_SECONDS;\n\n    // When the contract is emergency released, users can claim all their unclaimed tokens immediately,\n    // (the project can also claim on behalf of users. users still get their tokens in this case)\n    bool public isEmergencyReleased = false;\n\n    uint256 public vestingStartTime;\n    uint256 public totalAmount;\n    uint256 public totalClaimed;\n\n    struct UserVesting {\n        uint256 amount; // total amount of tokens to be vested for the user\n        uint256 claimed;\n    }\n\n    mapping(address => UserVesting) public userVestings;\n\n    // --- Events ---\n    event AmountSet(address indexed user, uint256 newAmount, uint256 oldAmount);\n    event Activated();\n    event Claimed(address indexed user, uint256 amount, bool indexed isInitiatedByProject);\n    event EmergencyReleased();\n    event EmergencyClaimed(address indexed user, uint256 amount, bool indexed isInitiatedByProject);\n    event TokenRecovered(address indexed token, uint256 amount);\n    event EtherRecovered(uint256 amount);\n\n    // --- Errors ---\n    error VestingDurationTooLong(uint256 vestingPeriodSeconds);\n    error StartTimeTooDistant(uint256 vestingStartTime, uint256 maxStartTime);\n    error StartTimeInPast(uint256 vestingStartTime);\n    error OnlyProjectOrSender();\n    error NotActivated();\n    error VestingNotStarted();\n    error AlreadyActivated();\n    error NothingToClaim();\n    error TotalAmountZero();\n    error EmergencyReleaseActive();\n    error NotEmergencyReleased();\n\n    // --- Modifiers ---\n    modifier onlyBeforeActivation() {\n        if (isActivated()) revert AlreadyActivated();\n        _;\n    }\n\n    modifier onlyProjectOrSender(address user) {\n        if (!(msg.sender == projectWallet || msg.sender == user)) revert OnlyProjectOrSender();\n        _;\n    }\n\n    constructor(address _projectToken, uint256 _vestingDurationSeconds, address _projectWallet) ProjectRole(_projectWallet) {\n        if (_vestingDurationSeconds > MAX_VESTING_DURATION_SECONDS) revert VestingDurationTooLong(_vestingDurationSeconds);\n\n        PROJECT_TOKEN = IERC20(_projectToken);\n        VESTING_DURATION_SECONDS = _vestingDurationSeconds;\n    }\n\n    // --- User only functions ---\n    function claim(address user) external onlyProjectOrSender(user) {\n        if (!isVestingStarted()) revert VestingNotStarted();\n        uint256 claimable = claimableFor(user);\n        if (claimable == 0) revert NothingToClaim();\n\n        userVestings[user].claimed += claimable;\n        totalClaimed += claimable;\n        PROJECT_TOKEN.safeTransfer(user, claimable);\n\n        emit Claimed(user, claimable, msg.sender == projectWallet);\n    }\n\n    // --- Project only functions ---\n    function setAmount(address user, uint256 newAmount) external onlyProject onlyBeforeActivation {\n        uint256 oldAmount = userVestings[user].amount;\n\n        if (newAmount > oldAmount) {\n            totalAmount += (newAmount - oldAmount);\n        } else {\n            totalAmount -= (oldAmount - newAmount);\n        }\n\n        userVestings[user].amount = newAmount;\n\n        emit AmountSet(user, newAmount, oldAmount);\n    }\n\n    function activate(uint256 _vestingStartTime) external onlyProject onlyBeforeActivation {\n        if (_vestingStartTime > (block.timestamp + MAX_START_TIME_FROM_NOW))\n            revert StartTimeTooDistant(_vestingStartTime, block.timestamp + MAX_START_TIME_FROM_NOW);\n\n        if (_vestingStartTime < block.timestamp) revert StartTimeInPast(_vestingStartTime);\n\n        if (totalAmount == 0) revert TotalAmountZero();\n\n        vestingStartTime = _vestingStartTime;\n\n        PROJECT_TOKEN.safeTransferFrom(projectWallet, address(this), totalAmount);\n\n        emit Activated();\n    }\n\n    // --- Emergency functions ---\n    // TODO(Audit) - ensure with legal/compliance we're ok without an emergency lever to release all tokens here\n    function emergencyRelease() external onlyOwner {\n        if (isEmergencyReleased) revert EmergencyReleaseActive();\n        // If not activated, the contract does not hold any tokens, so there's nothing to release\n        if (!isActivated()) revert NotActivated();\n\n        isEmergencyReleased = true;\n        emit EmergencyReleased();\n    }\n\n    function emergencyClaim(address user) external onlyProjectOrSender(user) {\n        if (!isEmergencyReleased) revert NotEmergencyReleased();\n\n        UserVesting storage userVesting = userVestings[user];\n        uint256 claimable = userVesting.amount - userVesting.claimed;\n        if (claimable == 0) revert NothingToClaim();\n\n        userVesting.claimed += claimable;\n        totalClaimed += claimable;\n        PROJECT_TOKEN.safeTransfer(user, claimable);\n\n        emit EmergencyClaimed(user, claimable, msg.sender == projectWallet);\n    }\n\n    function recoverToken(address tokenAddress) external onlyOwner {\n        uint256 tokenBalanceToRecover = IERC20(tokenAddress).balanceOf(address(this));\n\n        // Recover only project tokens that were sent by accident (tokens allocated to users will NOT be recovered)\n        if (tokenAddress == address(PROJECT_TOKEN)) {\n            uint256 totalOwed = totalAmount - totalClaimed;\n            if (totalOwed >= tokenBalanceToRecover) revert NothingToClaim();\n            tokenBalanceToRecover -= totalOwed;\n        }\n\n        IERC20(tokenAddress).safeTransfer(projectWallet, tokenBalanceToRecover);\n\n        emit TokenRecovered(tokenAddress, tokenBalanceToRecover);\n    }\n\n    // Recovers the native token of the chain\n    function recoverEther() external onlyOwner {\n        uint256 etherToRecover = address(this).balance;\n        Address.sendValue(payable(projectWallet), etherToRecover);\n\n        emit EtherRecovered(etherToRecover);\n    }\n\n    // --- View functions ---\n    function isActivated() public view returns (bool) {\n        return vestingStartTime != 0;\n    }\n\n    function isVestingStarted() public view returns (bool) {\n        return isActivated() && vestingStartTime <= block.timestamp;\n    }\n\n    function totalVestedFor(address user) public view returns (uint256) {\n        if (!isVestingStarted()) return 0;\n        UserVesting memory userVesting = userVestings[user];\n        return Math.min(((block.timestamp - vestingStartTime) * userVesting.amount) / VESTING_DURATION_SECONDS, userVesting.amount);\n    }\n\n    function claimableFor(address user) public view returns (uint256) {\n        return totalVestedFor(user) - userVestings[user].claimed;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": ["abi", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "metadata"],
        "": ["ast"]
      }
    }
  }
}
